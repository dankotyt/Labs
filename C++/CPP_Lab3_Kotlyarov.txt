#include <iostream>
#include <fstream>
#include <cstring>
#include <string>
#include <sstream>

#define _CRT_SECURE_NO_WARNINGS

using namespace std;

class Bank {
public:
    // Default constructor
    Bank();

    // Parameterized constructor
    Bank(const int accountNumber, const string name, const string surname, const double balance, const struct dateOpened);

    // Destructor
    ~Bank();

    // Assignment operator
    // Bank* operator=(const Bank&);

    //// Addition operator
    Bank operator+(double amount);
    //Bank operator+=(double amount);

    // Friend function declaration
    friend void findDepositsByClient(Bank* bank_list, int n, const string name, const string surname);
    friend istream& operator>>(istream& input, Bank& obj);
    friend bool operator<(const Bank&, const Bank&);

    // Getter functions
    const int& GetAccountNumber() const;
    const string& GetName() const;
    const string& GetSurname() const;
    const double& GetBalance() const;
    struct dateOpened {
        int day;
        int month;
        int year;
    } dateOpened;

private:
    string name;
    string surname;
    int accountNumber;
    double balance;
    double depositToAdd;
    static int count; // Count of existing Bank objects
};

int Bank::count = 0;

istream& operator>>(istream& input, Bank& obj) {
    cout << "Enter account number: ";
    input >> obj.accountNumber;
    cout << "Enter name: ";
    input >> obj.name;
    cout << "Enter surname: ";
    input >> obj.surname;
    cout << "Enter balance: ";
    input >> obj.balance;
    cout << "Enter date opened (day, month, year): ";
    input >> obj.dateOpened.day >> obj.dateOpened.month >> obj.dateOpened.year;
    return input;
}
 Bank Bank::operator+(double amount) {
     this->balance += amount;
     return *this;
 }
 //Bank Bank::operator+=(double amount) {
 //    *this = *this + amount;
 //    return *this;
 //}
// Bank* Bank::operator=(const Bank& obj) {
//     if (this == &obj) {
//         return this;
//     }

//     delete[] surname;
//     delete[] name;

//     accountNumber = obj.accountNumber;
//     balance = obj.balance;
//     dateOpened = obj.dateOpened;

//     // Deep copy the name and surname
//     name = new char[strlen(obj.name) + 1];
//     strcpy(name, obj.name);

//     surname = new char[strlen(obj.surname) + 1];
//     strcpy(surname, obj.surname);

//     return this;
// }

Bank::~Bank() {
    count--;
}

const int& Bank::GetAccountNumber() const {
    return accountNumber;
}

const string& Bank::GetSurname() const {
    return surname;
}

const string& Bank::GetName() const {
    return name;
}

const double& Bank::GetBalance() const {
    return balance;
}

bool operator<(const Bank& left, const Bank& right) {
    const string s1 = left.GetSurname();
    const string n1 = left.GetName();

    const string s2 = right.GetSurname();
    const string n2 = right.GetName();
    return (s1 < s2 || (s1 == s2 && n1 < n2));
}

Bank::Bank() {
    count++;
    accountNumber = 0;
    balance = 0.0;
    dateOpened.day = 1;
    dateOpened.month = 1;
    dateOpened.year = 1990;
}

void depositInfo(const Bank& dep) {
    cout << dep.GetAccountNumber() << "\t\t" << dep.GetName() << " " << dep.GetSurname() << "\t" << dep.GetBalance() << "\t\t" << dep.dateOpened.day << " " << dep.dateOpened.month << " " << dep.dateOpened.year << endl;
}

void printDeposits(Bank* bank_list, int n) {
    cout << "Account Number\tName Surname\tAmount\t\tDate Opened" << endl;
    for (int i = 0; i < n; i++) {
        depositInfo(bank_list[i]);
    }
}

void greaterThan(Bank* bank_list, int n, double balance) {
    cout << "Deposits with balance greater than " << balance << endl;
    cout << "Account Number\tName Surname\tAmount\tDate Opened" << endl;
    for (int i = 0; i < n; i++) {
        if (bank_list[i].GetBalance() > balance) {
            depositInfo(bank_list[i]);
        }
    }
}

void findDepositsByClient(Bank* bank_list, int n, const string name, const string surname) {
    Bank* results;
    results = new Bank[n];
    int count = 0;
    double depositToAdd;

    for (int i = 0; i < n; i++) {
        if (bank_list[i].GetName() == name && bank_list[i].GetSurname() == surname) {
            results[count] = bank_list[i];
            count++;
            for (int i = 0; i < n; i++) {
                if (bank_list[i].GetSurname() == surname) {
                    cout << "Enter balance to add:" << endl;
                    cin >> depositToAdd;
                    bank_list[i] = bank_list[i] + depositToAdd;
                    break;
                }
            }
        }
    }
    if (count == 0) {
        cout << "No deposits found for client " << name << " " << surname << endl;
    }
    else {
        cout << "Deposits for client " << name << " " << surname << endl;
        cout << "Account Number\tName Surname\tBalance\tDate Opened" << endl;
        for (int i = 0; i < count; i++) {
            depositInfo(results[i]);
        }
    }
    delete[] results;
}

void writeDataToFile(Bank* bank_list, int n) {
    ofstream out("deposits.txt", ios::out | ios::app);
    for (int i = 0; i < n; i++) {
        out << bank_list[i].GetAccountNumber() << "\t\t" << bank_list[i].GetName() << " " << bank_list[i].GetSurname() << "\t" << bank_list[i].GetBalance() << "\t\t" << bank_list[i].dateOpened.day << " " << bank_list[i].dateOpened.month << " " << bank_list[i].dateOpened.year << endl;
    }
    out.close();
    delete[] bank_list;
    exit(0);
}

int main() {
    string line;
    string name;
    string surname;
    int choice = 0;
    int n = 0;
    double balance = 0.0;
    Bank* bank_list = new Bank[100];
    while (true) {
        cout << "\n";
        cout << "1. Add new deposit." << endl;
        cout << "2. Print all deposits." << endl;
        cout << "3. Print deposits with balance greater than." << endl;
        cout << "4. Find deposits by client." << endl;
        cout << "5. Exit." << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cin >> bank_list[n];
            n++;
            break;
        case 2: {
            ifstream in("deposits.txt");
            if (in.is_open()) {
                printDeposits(bank_list, n);
                while (getline(in, line)) {
                    cout << line << "\t\t" << endl;
                }
            }
            else {
                cout << "Error opening file or no info" << endl;
                printDeposits(bank_list, n);
            }
            in.close();
            break;
        }
        case 3: {
            cout << "Enter balance: ";
            cin >> balance;
            greaterThan(bank_list, n, balance);
            break;
        }
        case 4: {
            cin.ignore();
            cout << "Enter client's name: ";
            getline(cin, name);
            cout << "Enter client's surname: ";
            getline(cin, surname);
            findDepositsByClient(bank_list, n, name, surname);
            break;
        }
        case 5:
            writeDataToFile(bank_list, n);
            break;
        default:
            cout << "Invalid choice, please try again." << endl;
            break;
        }
    }
    return 0;
}