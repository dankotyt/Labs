#include <iostream>
#include <fstream>
#include <cstring>
#include <string>
#include <sstream>
#include <list>
#include <algorithm>
#define _CRT_SECURE_NO_WARNINGS

using namespace std;

class Man {
public:
    Man() {}
    Man(const string& surname, const string& name) : surname(surname), name(name) {}

    const string& GetSurname() const {
        return surname;
    }

    const string& GetName() const {
        return name;
    }

    void setName(string n) {
        name = n;
    }
    void setSurname(string s) {
        surname = s;
    }

private:
    string surname;
    string name;
};

class Bank {
public:
    Bank();

    Bank(int accountNumber, Man& nameSurname, double balance, int d, int m, int y);

    ~Bank();

    friend void findDepositsByClient(list<Bank>& bank_list, int n, const Man& nameSurname);

    friend istream& operator>>(istream& input, Bank& obj);

    friend bool operator<(const Bank&, const Bank&);

    const int& GetAccountNumber() const;
    void setAccountNumber(int a);
    const Man& GetNameSurname() const;
    void setNameSurname(string n, string s);
    const double& GetBalance() const;
    void setBalance(int b);
    void setDate(int d, int m, int y);

    struct dateOpened {
        int day;
        int month;
        int year;
    } dateOpened;

private:
    Man nameSurname; 
    int accountNumber; 
    double balance; 

    static int count; // Счетчик объектов Bank
};

int Bank::count = 0;

// Перегрузка оператора ввода для класса Bank
istream& operator>>(istream& input, Bank& obj) {
    cout << "Enter account number: ";
    input >> obj.accountNumber;
    cout << "Enter full name: ";
    string s, n;
    input >> n;
    input >> s;
    obj.setNameSurname(n, s);
    cout << "Enter balance: ";
    input >> obj.balance;
    cout << "Enter date opened (day, month, year): ";
    input >> obj.dateOpened.day >> obj.dateOpened.month >> obj.dateOpened.year;
    return input;
}

Bank::~Bank() {
    count--;
}

const int& Bank::GetAccountNumber() const {
    return accountNumber;
}

void Bank::setAccountNumber(int a) {
    accountNumber = a;
}

const Man& Bank::GetNameSurname() const {
    return nameSurname;
}

void Bank::setNameSurname(string n, string s) {
    nameSurname.setName(n);
    nameSurname.setSurname(s);
}

const double& Bank::GetBalance() const {
    return balance;
}

void Bank::setBalance(int b) {
    balance = b;
}

void Bank::setDate(int d, int m, int y) {
    dateOpened.day = d;
    dateOpened.month = m;
    dateOpened.year = y;
}

// Перегрузка оператора сравнения для сортировки по фамилии и имени
bool operator<(const Bank& left, const Bank& right) {
    const string s1 = left.GetNameSurname().GetSurname();
    const string n1 = left.GetNameSurname().GetName();

    const string s2 = right.GetNameSurname().GetSurname();
    const string n2 = right.GetNameSurname().GetName();
    return (s1 < s2 || (s1 == s2 && n1 < n2));
}

// Конструктор по умолчанию
Bank::Bank() {
    count++;
    accountNumber = 0;
    balance = 0.0;
    dateOpened.day = 1;
    dateOpened.month = 1;
    dateOpened.year = 1990;
}

// Параметризованный конструктор
Bank::Bank(int accountNumber, Man& nameSurname, double balance, int d, int m, int y) {
    count++;
    this->accountNumber = accountNumber;
    this->balance = balance;
    dateOpened.day = d;
    dateOpened.month = m;
    dateOpened.year = y;
}

void depositInfo(const Bank& dep) {
    cout << dep.GetAccountNumber() << "\t\t" << dep.GetNameSurname().GetName() << " " << dep.GetNameSurname().GetSurname() << "\t" << dep.GetBalance() << "\t\t" << dep.dateOpened.day << " " << dep.dateOpened.month << " " << dep.dateOpened.year << endl;
}

void printDeposits(list<Bank>& bank_list, int n) {
    cout << "Account Number\tName Surname\tAmount\t\tDate Opened" << endl;
    for (auto it = bank_list.begin(); it != bank_list.end(); ++it) {
        depositInfo(*it);
    }
}

// Функция для вывода депозитов с балансом больше заданного
void greaterThan(list<Bank>& bank_list, int n, double balance) {
    cout << "Deposits with balance greater than " << balance << endl;
    cout << "Account Number\tName Surname\tAmount\tDate Opened" << endl;
    for (auto it = bank_list.begin(); it != bank_list.end(); ++it) {
        if (it->GetBalance() > balance) {
            depositInfo(*it);
        }
    }
}

void findDepositsByClient(list<Bank>& bank_list, int n, const Man& nameSurname) {
    list<Bank> results;
    int count = 0;
    int depositToAdd = 1000;

    for (auto it = bank_list.begin(); it != bank_list.end(); ++it) {
        if (it->GetNameSurname().GetName() == nameSurname.GetName() && it->GetNameSurname().GetSurname() == nameSurname.GetSurname()) {
            results.push_back(*it);
            count++;
            for (auto it = bank_list.begin(); it != bank_list.end(); ++it) {
                if (it->GetNameSurname().GetSurname() == nameSurname.GetSurname()) {
                    it->balance += depositToAdd;
                    break;
                }
            }
        }
    }

    if (count == 0) {
        cout << "No deposits found for client " << nameSurname.GetName() << " " << nameSurname.GetSurname() << endl;
    }
    else {
        cout << "Deposits for client " << nameSurname.GetName() << " " << nameSurname.GetSurname() << endl;
        cout << "Account Number\tName Surname\tBalance\tDate Opened" << endl;
        for (auto it = bank_list.begin(); it != bank_list.end(); ++it) {
            depositInfo(*it);
        }
    }
}

void writeDataToFile(list<Bank>& bank_list, int n) {
    fstream out("deposits.txt", ios::out | ios::trunc);
    for (auto it = bank_list.begin(); it != bank_list.end(); ++it) {
        out << it->GetAccountNumber() << " " << it->GetNameSurname().GetName() << " " << it->GetNameSurname().GetSurname() << " " << it->GetBalance() << " " << it->dateOpened.day << " " << it->dateOpened.month << " " << it->dateOpened.year << endl;
    }
    out.close();
    bank_list.clear();
    exit(0);
}

bool compare(const Bank& left, const Bank& right) {
    return left.GetBalance() < right.GetBalance();
}

int main() {
    string line;
    string name;
    string surname;
    int choice = 0;
    int n = 0;
    int i = 0;
    string s;
    string s1;
    double balance = 0.0;

    fstream file;
    file.open("deposits.txt", ios::in | ios::out | ios::app);

    bool t = true;
    list<Bank> bank_list;
    Bank b;
    while (true) {
        getline(file, s, ' ');
        if (file.eof()) {
            break;
        }
        b.setAccountNumber(stoi(s));

        getline(file, name, ' ');
        getline(file, surname, ' ');
        b.setNameSurname(name, surname);

        getline(file, s, ' ');
        b.setBalance(stoi(s));

        getline(file, s, ' ');
        getline(file, line, ' ');
        getline(file, s1, '\n');
        b.setDate(stoi(s), stoi(line), stoi(s1));
        bank_list.push_back(b);
        t = false;
    }

    if (t) {
        cout << "Welcome! Add new deposit." << endl;
        bank_list.push_back(b);
        cin >> bank_list.back();
    }

    while (true) {
        cout << "\n";
        cout << "1. Add new deposit." << endl;
        cout << "2. Print all deposits." << endl;
        cout << "3. Print deposits with balance greater than." << endl;
        cout << "4. Find deposits by client." << endl;
        cout << "5. Sort by balance." << endl;
        cout << "6. Exit." << endl;
        cout << "Enter your choice: ";
        cin >> choice;
        switch (choice) {
        case 1:
            bank_list.push_back(Bank());
            cin >> bank_list.back();
            n++;
            break;
        case 2: {
            printDeposits(bank_list, bank_list.size());
            break;
        }
        case 3: {
            cout << "Enter balance: ";
            cin >> balance;
            greaterThan(bank_list, n, balance);
            break;
        }
        case 4: {
            cin.ignore();
            cout << "Enter client's name: ";
            getline(cin, name);
            cout << "Enter client's surname: ";
            getline(cin, surname);
            Man nameSurname(surname, name);
            findDepositsByClient(bank_list, n, nameSurname);
            break;
        }
        case 5:
            bank_list.sort(compare);
            break;
        case 6:
            writeDataToFile(bank_list, n);
            break;
        default:
            cout << "Invalid choice, please try again." << endl;
            break;
        }
    }
    return 0;
}