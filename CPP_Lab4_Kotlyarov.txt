#include <iostream>
#include <fstream>
#include <cstring>
#include <string>
#include <sstream>

#define _CRT_SECURE_NO_WARNINGS

using namespace std;

class man {
public:

     const string& getName() const{
        return name;
    }
    void setName(string name) {
        this->name = name;
    }
    const string& getSurname() const {
        return surname;
    }
    void setSurname(string surname) {
        this->surname = surname;
    }
    //inizialization (constructor)
    man (string name, string surname) {   
        this->name = name;
        this->surname = surname;
    }
    man() {
        this->name = "";
        this->surname = "";
    }
private:
    string name;
    string surname;

};
class Bank {
public:
    // Default constructor
    Bank();

    // Parameterized constructor
    Bank(const int accountNumber, const string name, const string surname, const double balance);

    // Copy constructor
    //Bank(const Bank& object);

    // Destructor
    ~Bank();

    void SetAccountNumber(int a);
    void SetSurname(string a);
    void SetName(string a);
    void SetBalance(int a);
    // Assignment operator
   /* Bank* operator==(const Bank&);*/

    //// Addition operator
    Bank operator+(double amount);
    //Bank operator+=(double amount);

    // Friend function declaration
    friend void findDepositsByClient(Bank* bank_list, int n, const string name, const string surname);
    friend istream& operator>>(istream& input, Bank& obj);
    friend bool operator==(const Bank&, const man&);

    // Getter functions
    const int& GetAccountNumber() const;
    const string& GetName() const;
    const string& GetSurname() const;
    const double& GetBalance() const;
    /*struct dateOpened {
        int day;
        int month;
        int year;
    } dateOpened;*/

private:
    man fname;
    int accountNumber;
    double balance;
    double depositToAdd;
    static int count; // Count of existing Bank objects
};

int Bank::count = 0;

istream& operator>>(istream& input, Bank& obj) {
    cout << "Enter account number: ";
    input >> obj.accountNumber;
    cout << "Enter name: ";
    string s;
    input >> s;
    obj.fname.setName(s);
    cout << "Enter surname: ";
    input >> s;
    obj.fname.setSurname(s);
    cout << "Enter balance: ";
    input >> obj.balance;
    return input;
}
Bank Bank::operator+(double amount) {
    this->balance += amount;
    return *this;
}
//Bank Bank::operator+=(double amount) {
//    *this = *this + amount;
//    return *this;
//}
//Bank* Bank::operator=(const Bank& obj) {
//    if (this == &obj) {
//        return this;
//    }
//     delete[] surname;
//     delete[] name;
//
//     accountNumber = obj.accountNumber;
//     balance = obj.balance;
//     dateOpened = obj.dateOpened;
//
//      Deep copy the name and surname
//     name = new char[strlen(obj.name) + 1];
//     strcpy(name, obj.name);
//
//     surname = new char[strlen(obj.surname) + 1];
//     strcpy(surname, obj.surname);
//
//     return this;
// }

Bank::~Bank() {
    count--;
}

const int& Bank::GetAccountNumber() const {
    return accountNumber;
}
void Bank::SetAccountNumber(int a)  {
     accountNumber = a;
}

const string& Bank::GetSurname() const {
    return fname.getSurname();
}

void Bank::SetSurname(string a) {
    fname.setSurname(a);
}

const string& Bank::GetName() const {
    return fname.getName();
}

void Bank::SetName(string a) {
    fname.setName(a);
}

const double& Bank::GetBalance() const {
    return balance;
}

void Bank::SetBalance(int a) {
    balance = a;
}



bool operator==(const Bank& left, const man& right) {
    const string s1 = left.GetSurname();
    const string n1 = left.GetName();

    const string s2 = right.getSurname();
    const string n2 = right.getName();
    return (s1 == s2 and n1 == n2);
}

Bank::Bank() {
    count++;
    accountNumber = 0;
    balance = 0.0;
    //dateOpened.day = 1;
    //dateOpened.month = 1;
    //dateOpened.year = 1990;
}

void depositInfo(const Bank& dep) {
    cout << dep.GetAccountNumber() << "\t" << dep.GetName() << " " << dep.GetSurname() << "\t" << dep.GetBalance() << endl;
}

void printDeposits(Bank* bank_list, int n) {
    cout << "Account Number\tName Surname\tAmount" << endl;
    for (int i = 0; i < n; i++) {
        depositInfo(bank_list[i]);
    }
}

void greaterThan(Bank* bank_list, int n, double balance) {
    cout << "Deposits with balance greater than " << balance << endl;
    cout << "Account Number\tName Surname\tAmount" << endl;
    for (int i = 0; i < n; i++) {
        if (bank_list[i].GetBalance() > balance) {
            depositInfo(bank_list[i]);
        }
    }
}

void findDepositsByClient(Bank* bank_list, int n, const string name, const string surname) {
    Bank* results;
    results = new Bank[n];
    int count = 0;
    double depositToAdd;

    for (int i = 0; i < n; i++) {
        if (bank_list[i].GetName() == name && bank_list[i].GetSurname() == surname) {
            results[count] = bank_list[i];
            count++;
            for (int i = 0; i < n; i++) {
                if (bank_list[i].GetSurname() == surname) {
                    cout << "Enter balance to add:" << endl;
                    cin >> depositToAdd;
                    bank_list[i] = bank_list[i] + depositToAdd;
                    break;
                }
            }
        }
    }
    if (count == 0) {
        cout << "No deposits found for client " << name << " " << surname << endl;
    }
    else {
        cout << "Deposits for client " << name << " " << surname << endl;
        cout << "Account Number\tName Surname\tBalance" << endl;
        for (int i = 0; i < count; i++) {
            depositInfo(results[i]);
        }
    }
    delete[] results;
}

void writeDataToFile(Bank* bank_list, int n) {
    ofstream out("deposits.txt", ios::out | ios::app);
    for (int i = 0; i < n; i++) {
        out << bank_list[i].GetAccountNumber() << "\t" << bank_list[i].GetName() << " " << bank_list[i].GetSurname() << "\t" << bank_list[i].GetBalance() << endl;
    }
    out.close();
    delete[] bank_list;
    exit(0);
}

int main() {
    string line;
    string name;
    string surname;
    int choice = 0;
    int n = 0;
    double balance = 0.0;
    Bank* bank_list = new Bank[100];
    while (true) {
        cout << "\n";
        cout << "1. Add new deposit." << endl;
        cout << "2. Print all deposits." << endl;
        cout << "3. Print deposits with balance greater than." << endl;
        cout << "4. Find deposits by client." << endl;
        cout << "5. Find compared client." << endl;
        cout << "6. Exit." << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        man person("John", "Gorban");
        ifstream in("deposits.txt");
        if (in.is_open()) {
            while (!in.eof()) {
                
                string s;
                getline(in, s, '\t');
                if (!s.empty()) {
                    bank_list[n].SetAccountNumber(stoi(s));
                    getline(in, s, ' ');
                    bank_list[n].SetName(s);
                    getline(in, s, '\t');
                    bank_list[n].SetSurname(s);
                    getline(in, s, '\n');
                    bank_list[n].SetBalance(stoi(s));
                    n++;
                }
            }

        }
        switch (choice) {
        case 1:
            cin >> bank_list[n];
            n++;
            break;
        case 2: {
            ifstream in("deposits.txt");
            cout << n << endl;
            printDeposits(bank_list, n);
            break;
        }
        case 3: {
            cout << "Enter balance: ";
            cin >> balance;
            greaterThan(bank_list, n, balance);
            break;
        }
        case 4: {
            cin.ignore();
            cout << "Enter client's name: ";
            getline(cin, name);
            cout << "Enter client's surname: ";
            getline(cin, surname);
            findDepositsByClient(bank_list, n, name, surname);
            break;
        }
        case 5: {
            printDeposits(bank_list, n);
            cout << "Enter compared number person: " << endl;
            int indx;
            cin >> indx;
            cout << bank_list[indx - 1].GetName() << endl;
            if (bank_list[indx - 1] == person) {
                cout << "Ok" << endl;
            }
            else {
                cout << "not ok" << endl;
            }

        }
        case 6:
            writeDataToFile(bank_list, n);
            break;
        default:
            cout << "Invalid choice, please try again." << endl;
            break;
        }
    }
    return 0;
}